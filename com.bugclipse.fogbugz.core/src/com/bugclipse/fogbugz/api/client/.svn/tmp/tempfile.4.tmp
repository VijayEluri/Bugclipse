package com.bugclipse.fogbugz.api.client;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.security.GeneralSecurityException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;

import org.apache.commons.httpclient.Credentials;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpMethod;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
import org.apache.commons.httpclient.NameValuePair;
import org.apache.commons.httpclient.UsernamePasswordCredentials;
import org.apache.commons.httpclient.auth.AuthScope;
import org.apache.commons.httpclient.cookie.CookiePolicy;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.multipart.FilePart;
import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;
import org.apache.commons.httpclient.methods.multipart.Part;
import org.apache.commons.httpclient.methods.multipart.StringPart;
import org.apache.commons.httpclient.params.HttpMethodParams;
import org.eclipse.mylyn.web.core.WebClientUtil;
import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.Unmarshaller;
import org.exolab.castor.xml.ValidationException;

import com.bugclipse.fogbugz.api.Area;
import com.bugclipse.fogbugz.api.Case;
import com.bugclipse.fogbugz.api.Category;
import com.bugclipse.fogbugz.api.Filter;
import com.bugclipse.fogbugz.api.Fixfor;
import com.bugclipse.fogbugz.api.Person;
import com.bugclipse.fogbugz.api.PersonContained;
import com.bugclipse.fogbugz.api.Priority;
import com.bugclipse.fogbugz.api.Project;
import com.bugclipse.fogbugz.api.Response;
import com.bugclipse.fogbugz.api.Status;
import com.bugclipse.fogbugz.api.exception.FogBugzClientException;
import com.bugclipse.fogbugz.api.exception.FogBugzLicenseException;
import com.bugclipse.fogbugz.core.FogBugzAttributeFactory;
import com.bugclipse.fogbugz.core.FogBugzAttributeFactory.FogBugzAttribute;
import com.websina.license.LicenseManager;

public class FogBugzClient implements IFogBugzClient {

	private HttpClient httpClient;

	private boolean authenticated;

	private String token;

	private String repositoryUrl, username, password;

	private Proxy proxy;

	private static final FogBugzAttributeFactory attributeFactory = new FogBugzAttributeFactory();

	private HashMap<String, ArrayList<String>> areas;

	private HashMap<String, ArrayList<String>> fixFors;

	public FogBugzClient(String repositoryUrl, String username,
			String password, Proxy proxy) {
		this.repositoryUrl = repositoryUrl;
		this.username = username;
		this.password = password;
		this.proxy = proxy;
		this.httpClient = new HttpClient();
		httpClient
				.setHttpConnectionManager(new MultiThreadedHttpConnectionManager());
	}

	public Project[] getProjects() throws FogBugzClientException {
		GetMethod method = connect(repositoryUrl + LIST_PROJECTS_URL);
		Response response = unmarshalResponse(method);
		return response.getProjects().getProject();
	}

	public Filter[] getFilters() throws FogBugzClientException {
		GetMethod method = connect(repositoryUrl + LIST_FILTERS_URL);
		Response response = unmarshalResponse(method);
		return response.getFilters().getFilter();
	}

	public ArrayList<String> getOptions(FogBugzAttribute attribute)
			throws FogBugzClientException {
		ArrayList<String> options = new ArrayList<String>();
		if (attribute.equals(FogBugzAttribute.PROJECT)) {
			Project[] projects = getProjects();
			for (Project project : projects) {
				options.add(project.getSProject());
			}
		} else if (attribute.equals(FogBugzAttribute.PRIORITY)) {
			Priority[] priors = getPriorities();
			for (Priority priority : priors) {
				options.add(priority.getIxPriority() + " - "
						+ priority.getSPriority());
			}
		} else if (attribute.equals(FogBugzAttribute.CATEGORY)) {
			Category[] categories = getCategories();
			for (Category category : categories) {
				options.add(category.getSCategory());
			}
		} else if (attribute.equals(FogBugzAttribute.ASSIGNED_TO)) {
			PersonContained[] persons = getPeople();
			for (PersonContained contained : persons) {
				options.add(contained.getSFullName());
			}
		}
		return options;
	}

	public Case[] getCasesIn(String filterId) throws FogBugzClientException {
		GetMethod method = connect(repositoryUrl + SET_CURRENT_FILTER_URL
				+ filterId);
		method.releaseConnection();
		String cols = "ixBug,fOpen,sTitle,sLatestTextSummary,sProject,sArea,"
				+ "ixPersonAssignedTo,sPersonAssignedTo,sEmailAssignedTo,ixStatus,sStatus,"
				+ "ixPriority,sPriority,ixFixFor,sFixFor,dtFixFor,"
				+ "sVersion,sComputer,hrsCurrEst,hrsElapsed,ixCategory,sCategory,dtOpened,dtResolved,dtClosed,dtLastUpdated,dtDue,events";
		method = connect(repositoryUrl + LIST_CASES_URL + "&cols=" + cols);
		Response response = unmarshalResponse(method);
		return response.getCases().getCase();
	}

	public Map<String, Case> getCases(Set<String> caseIds)
			throws FogBugzClientException {
		HashMap<String, Case> caseMap = new HashMap<String, Case>();
		String cols = "ixBug,fOpen,sTitle,sLatestTextSummary,sProject,sArea,"
				+ "ixPersonAssignedTo,sPersonAssignedTo,sEmailAssignedTo,ixStatus,sStatus,"
				+ "ixPriority,sPriority,ixFixFor,sFixFor,dtFixFor,"
				+ "sVersion,sComputer,hrsCurrEst,hrsElapsed,ixCategory,sCategory,dtOpened,dtResolved,dtClosed,dtLastUpdated,dtDue,events";
		Iterator i = caseIds.iterator();
		if (i.hasNext()) {
			String ids = "" + i.next();
			while (i.hasNext())
				ids += "," + i.next();
			GetMethod method = connect(repositoryUrl + LIST_CASES_URL + ids
					+ "&cols=" + cols);
			Response response = unmarshalResponse(method);
			Case[] cases = response.getCases().getCase();
			for (int j = 0; j < cases.length; j++) {
				caseMap.put(cases[j].getIxBug() + "", cases[j]);
			}
		}
		return caseMap;
	}

	public Case getCase(String id) throws FogBugzClientException {
		Set<String> data = new HashSet<String>();
		data.add(id);
		Map<String, Case> returnedData = getCases(data);
		return returnedData.get(id);
	}

	private Area[] getSAreas() throws FogBugzClientException {
		GetMethod method = connect(repositoryUrl + LIST_AREAS_URL);
		Response response = unmarshalResponse(method);
		return response.getAreas().getArea();
	}

	public HashMap<String, ArrayList<String>> getAreas()
			throws FogBugzClientException {
		if (areas == null) {
			Area[] sAreas = getSAreas();
			areas = new HashMap<String, ArrayList<String>>();
			for (Area area : sAreas) {
				ArrayList entry = areas.get(area.getSProject());
				if (entry == null) {
					ArrayList<String> a = new ArrayList<String>();
					a.add(area.getSArea());
					areas.put(area.getSProject(), a);
				} else {
					entry.add(area.getSArea());
				}
			}
		}
		return areas;
	}

	public HashMap<String, ArrayList<String>> getFixFors()
			throws FogBugzClientException {
		String undecided = null;
		if (fixFors == null) {
			Fixfor[] fixs = getSFixFors();
			fixFors = new HashMap<String, ArrayList<String>>();
			for (Fixfor fix : fixs) {
				if (fix.getSProject() == null || fix.getSProject().equals(""))
					undecided = fix.getSFixFor();
				ArrayList entry = fixFors.get(fix.getSProject());
				if (entry == null) {
					ArrayList<String> a = new ArrayList<String>();
					a.add(fix.getSFixFor() + ": " + fix.getDt());
					fixFors.put(fix.getSProject(), a);
				} else {
					entry.add(fix.getSFixFor() + ": " + fix.getDt());
				}
			}
			for (Entry<String, ArrayList<String>> entry : fixFors.entrySet()) {
				entry.getValue().add(undecided);
			}
			ArrayList<String> und = new ArrayList<String>();
			und.add(undecided);
			fixFors.put(FogBugzAttributeFactory.UNDECIDED, und);
		}
		return fixFors;
	}

	public Fixfor[] getSFixFors() throws FogBugzClientException {
		GetMethod method = connect(repositoryUrl + LIST_FIXFORS_URL);
		Response response = unmarshalResponse(method);
		return response.getFixfors().getFixfor();
	}

	public Category[] getCategories() throws FogBugzClientException {
		GetMethod method = connect(repositoryUrl + LIST_CATEGORIES_URL);
		Response response = unmarshalResponse(method);
		return response.getCategories().getCategory();
	}

	public Status[] getStatuses() throws FogBugzClientException {
		GetMethod method = connect(repositoryUrl + LIST_STATUSES_URL);
		Response response = unmarshalResponse(method);
		return response.getStatuses().getStatus();
	}

	public Status[] getResolvedStatuses() throws FogBugzClientException {
		GetMethod method = connect(repositoryUrl + LIST_RESOLVED_STATUSES_URL);
		Response response = unmarshalResponse(method);
		return response.getStatuses().getStatus();
	}

	public Priority[] getPriorities() throws FogBugzClientException {
		GetMethod method = connect(repositoryUrl + LIST_PRIORITIES_URL);
		Response response = unmarshalResponse(method);
		return response.getPriorities().getPriority();
	}

	public PersonContained[] getPeople() throws FogBugzClientException {
		GetMethod method = connect(repositoryUrl + LIST_PEOPLE_URL);
		Response response = unmarshalResponse(method);
		return response.getPeople().getPersonContained();
	}

	public Person getPerson(String personId) throws FogBugzClientException {
		GetMethod method = connect(repositoryUrl + VIEW_PERSON_URL + personId);
		Response response = unmarshalResponse(method);
		return response.getPerson();
	}

	/**
	 * @param url
	 *            Relative URL of the attachment of the form
	 *            "default.asp?pg=pgDownload&amp;pgType=pgAttachment&amp;ixBugEvent=756"
	 * @return InputStream of the file in the HTTP response
	 * @throws FogBugzClientException
	 * @throws IOException
	 */
	public InputStream downloadAttachment(String url)
			throws FogBugzClientException, IOException {
		GetMethod method = connect(repositoryUrl + "/" + url);
		return method.getResponseBodyAsStream();
	}

	public void updateCase(String caseId, Map<String, String> attributes,
			String newComment, File[] files) throws FogBugzClientException {
		String url = repositoryUrl + EDIT_CASE_URL + caseId;
		if (newComment != null && !newComment.equals("")) {
			attributes.put("sEvent", newComment);
		}
		PostMethod method = post(url, attributes, files);
		Response response = unmarshalResponse(method);
		System.out.println(response.getDescription());
	}



	private synchronized GetMethod connect(String serverURL)
			throws FogBugzClientException {
		try {
			if (!LicenseManager.getInstance().isValid())
				throw new FogBugzLicenseException("License not valid!");
			GetMethod m = connectInternal(serverURL);
			return m;

		} catch (FogBugzClientException e) {
			throw e;
		} catch (MarshalException e) {
			throw new FogBugzClientException(e);
		} catch (ValidationException e) {
			throw new FogBugzClientException(e);
		} catch (HttpException e) {
			throw new FogBugzClientException(e);
		} catch (IOException e) {
			throw new FogBugzClientException(e);
		} catch (GeneralSecurityException e) {
			throw new FogBugzLicenseException(e);
		} catch (ExceptionInInitializerError e) {
			throw new FogBugzLicenseException(e.getCause());
		} catch (Throwable t) {
			throw new FogBugzClientException(t);
		}
	}

	private GetMethod connectInternal(String serverURL)
			throws MarshalException, ValidationException, HttpException,
			FogBugzClientException, IOException {
		WebClientUtil.setupHttpClient(httpClient, proxy, serverURL, null, null);

		for (int attempt = 0; attempt < 2; attempt++) {
			// force authentication
			if (!authenticated && hasAuthenticationCredentials()) {
				authenticate();
			}

			String requestUrl = WebClientUtil.getRequestPath(serverURL
					+ "&token=" + token);
			GetMethod method = new GetMethod(requestUrl);
			method.getParams().setCookiePolicy(
					CookiePolicy.BROWSER_COMPATIBILITY);
			int code;
			try {
				code = httpClient.executeMethod(method);
			} catch (IOException e) {
				method.releaseConnection();
				e.printStackTrace();
				throw e;
			}

			if (code == HttpURLConnection.HTTP_OK) {
				return method;
			} else if (code == HttpURLConnection.HTTP_UNAUTHORIZED
					|| code == HttpURLConnection.HTTP_FORBIDDEN) {
				// login or re-authenticate due to an expired session
				method.releaseConnection();
				authenticated = false;
				authenticate();
			} else {
				throw new FogBugzClientException("code = " + code);
			}
		}

		throw new FogBugzClientException("Session might have expired!");
	}

	private PostMethod post(String formUrl, Map<String, String> formData,
			File[] files) throws FogBugzClientException {
		try {
			return postInternal(formUrl, formData, files);
		} catch (MarshalException e) {
			throw new FogBugzClientException(e);
		} catch (ValidationException e) {
			throw new FogBugzClientException(e);
		} catch (HttpException e) {
			throw new FogBugzClientException(e);
		} catch (IOException e) {
			throw new FogBugzClientException(e);
		}
	}

	private PostMethod postInternal(String formUrl,
			Map<String, String> changed, File[] files)
			throws FogBugzClientException, HttpException, IOException,
			MarshalException, ValidationException {

		WebClientUtil.setupHttpClient(httpClient, proxy, formUrl, null, null);
		if (!authenticated && hasAuthenticationCredentials()) {
			authenticate();
		}

		String requestUrl = WebClientUtil.getRequestPath(formUrl + "&token="
				+ token);
		PostMethod postMethod = new PostMethod(requestUrl);
		// postMethod.setRequestHeader("Content-Type",
		// "application/x-www-form-urlencoded; charset="
		// + characterEncoding);

		// postMethod.setRequestBody(formData);
		postMethod.setDoAuthentication(true);

		HttpMethodParams p = postMethod.getParams();
		ArrayList<Part> parts = new ArrayList<Part>();
		for (int i = 0; i < files.length; i++) {
			FilePart part = new FilePart("File" + (i + 1), files[i]);
			part.setTransferEncoding(null);
			parts.add(part);
		}
//		if (files.length > 0) {
//			StringPart part = new StringPart("nFileCount", files.length + "");
//			part.setTransferEncoding(null);
//			parts.add(part);
//		}
		for (String key : changed.keySet()) {
			StringPart part = new StringPart(key, changed.get(key));
			part.setTransferEncoding(null);
			part.setContentType(null);
			parts.add(part);
		}
		postMethod.setRequestEntity(new MultipartRequestEntity(parts
				.toArray(new Part[0]), p));

		int status = httpClient.executeMethod(postMethod);
		if (status == HttpStatus.SC_OK) {
			return postMethod;
		} else {
			postMethod.getResponseBody();
			postMethod.releaseConnection();
			throw new IOException(
					"Communication error occurred during upload. \n\n"
							+ HttpStatus.getStatusText(status));
		}
	}

	protected boolean hasAuthenticationCredentials() {
		return username != null && username.length() > 0;
	}

	private void authenticate() throws FogBugzClientException, HttpException,
			IOException, MarshalException, ValidationException {
		// WebClientUtil.setupHttpClient(httpClient, proxy, repositoryUrl, null,
		// null);
		if (!hasAuthenticationCredentials()) {
			throw new FogBugzClientException("No authentication credentials!");
		}

		// try standard basic/digest authentication first
		Credentials credentials = new UsernamePasswordCredentials(username,
				password);
		httpClient.getState().setCredentials(
				new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT,
						AuthScope.ANY_REALM), credentials);

		GetMethod method = new GetMethod(WebClientUtil
				.getRequestPath(repositoryUrl + "/api.asp?cmd=logon&email="
						+ username + "&password=" + password));
		method.setFollowRedirects(false);
		int code;
		try {
			httpClient.getParams().setAuthenticationPreemptive(true);
			code = httpClient.executeMethod(method);
			if (code == HttpURLConnection.HTTP_UNAUTHORIZED
					|| code == HttpURLConnection.HTTP_FORBIDDEN) {
				throw new FogBugzClientException("Session might have expired!");
			}
			authenticated = true;
			Response r = unmarshalResponse(method);
			token = r.getToken();
		} finally {
			method.releaseConnection();
			httpClient.getParams().setAuthenticationPreemptive(false);
		}

		// the expected return code is a redirect, anything else is suspicious
		if (code == HttpURLConnection.HTTP_OK) {
			// try form-based authentication via AccountManagerPlugin as a
			// fall-back
			// authenticateAccountManager(httpClient);
		}

		// validateAuthenticationState(httpClient);

		// success since no exception was thrown

	}

	private Response unmarshalResponse(HttpMethod method)
			throws FogBugzClientException {
		try {
			Unmarshaller un = new Unmarshaller(Response.class);
			un.setIgnoreExtraElements(true);
			un.setIgnoreExtraAttributes(true);
			un.setValidation(false);
			String respBody = method.getResponseBodyAsString();
			return (Response) un.unmarshal(new StringReader(respBody));
		} catch (IOException e) {
			throw new FogBugzClientException(e);
		} catch (MarshalException e) {
			throw new FogBugzClientException(e);
		} catch (ValidationException e) {
			throw new FogBugzClientException(e);
		} finally {
			System.out.println("releasing method connection");
			method.releaseConnection();
		}
	}

	public static void main(String[] args) throws Exception {
		FogBugzClient client = new FogBugzClient("https://subhash.fogbugz.com",
				"cs19739@yahoo.com", "cs19739", null);
<<<<<<< .mine
		Map<String, String> map = new HashMap<String, String>();
		map.put("sTitle", "Haha");
		File[] files = new File[] { new File("c:/temp/1.txt"),
				new File("c:/temp/1.xml") };
		client.updateCase("1", map, "Something's changed", files);
=======
		Case c = client.getCase("1");
		EventContained[] e = c.getEventsContained().getEventContained();
		for (int i = 0; i < e.length; i++) {
			System.out.println(e[i].getEvtDescription());
			AttachmentContained[] a = e[i].getRgAttachmentsContained()
					.getAttachmentContained();
			for (int j = 0; j < a.length; j++) {
				System.out
						.println(a[j].getSFileName() + " - " + a[j].getSURL());
				BufferedReader r = new BufferedReader(new InputStreamReader(
						client.downloadAttachment(a[j].getSURL())));
				String str = "";
				String line = "";
				while ((line = r.readLine()) != null) {
					str += line + "\n";
				}
				System.out.println("stuff - " + str);

			}
		}
>>>>>>> .r128
	}

}
